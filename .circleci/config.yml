version: 2.1

jobs:
  static_analysis:
    working_directory: ~/app/src
    docker:
      - image: golang:1.18-alpine
    steps:
      - checkout
          path: ~/app
      - run:
          name: Install dependencies
          run: go mod download
      - run:
          name: Install golangci-lint
          command: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && golangci-lint --version
      - run:
          name: Run golangci-lint with linters gosec, gofmt, staticcheck, gosimple and typecheck
          command: golangci-lint run --disable-all -E gosec -E gofmt -E staticcheck -E gosimple -E unused -E typecheck

  build:
    working_directory: /app
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build API Docker image
          command: docker build -f docker/api.Dockerfile -t ${DOCKER_USERNAME}/minitwitapi:latest .
      - run:
          name: Build app Docker image
          command: docker build -f docker/app.Dockerfile -t ${DOCKER_USERNAME}/minitwitapp:latest .
      - run: 
          name: Log in to Docker Hub
          command: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
      - run:
          name: Push API image to Docker Hub
          command: docker push ${DOCKER_USERNAME}/minitwitapi:latest
      - run: 
          name: Push app image to Docker Hub
          command: docker push ${DOCKER_USERNAME}/minitwitapp:latest

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Push to VPS
          command: |
            ssh -o "StrictHostKeyChecking no" ${MT_USER}@${MT_SERVER} \
            "cd ~/minitwit_thesvindler && \
            docker-compose down && \
            git pull && \
            echo ${SUDO_PASS} | sudo -S bash ./setup-elk.sh && \
            docker-compose pull && \
            docker system prune -f && \
            docker-compose up -d"

workflows:
  deploy-workflow:
    jobs:
      - static_analysis:
      - build:
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
