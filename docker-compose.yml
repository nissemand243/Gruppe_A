version: "3.8"

services:
  api:
    image: salsitu/minitwitapi:latest
    container_name: "minitwit_api"
    restart: unless-stopped
    environment:
      DB_PASSWD: "${DB_PASSWD:-passwd}"
    networks:
      - main
    depends_on:
      - grafana
      - prometheus
    deploy:
      mode: global

  app:
    image: salsitu/minitwitapp:latest
    container_name: "minitwit_app"
    restart: unless-stopped
    environment:
      DB_PASSWD: "${DB_PASSWD:-passwd}"
    networks:
      - main
    depends_on:
      - grafana
      - prometheus
    deploy:
      mode: global

  postgres:
    image: postgres:13-alpine
    container_name: "minitwit_postgres"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "minitwit_db"
      POSTGRES_USER: "minitwit_user"
      POSTGRES_PASSWORD: "${DB_PASSWD:-passwd}"
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr

  grafana:
    image: salsitu/minitwitgrafana:latest
    container_name: "minitwit_grafana"
    restart: unless-stopped
    environment:
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/var/lib/grafana/dashboards/home_dashboard.json"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWD:-admin}"
      GF_SERVER_DOMAIN: "${SCHEME:-http}://${DOMAINNAME:-localhost}"
      GF_SERVER_ROOT_URL: "${SCHEME:-http}://${DOMAINNAME:-localhost}/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    user: root
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr

  prometheus:
    image: salsitu/minitwitprometheus:latest
    container_name: "minitwit_prometheus"
    restart: unless-stopped
    user: root
    volumes:
      - prometheus_data:/prometheus/data
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    container_name: "minitwit_elasticsearch"
    environment:
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      discovery.type: "single-node"
    volumes:
      - elk_minitwit_data:/usr/share/elasticsearch/data
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr

  filebeat:
    image: salsitu/minitwitfilebeat:latest
    container_name: "minitwit_filebeat"
    user: root
    volumes:
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk
    depends_on:
      - elasticsearch
    deploy:
      mode: global

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    container_name: "minitwit_kibana"
    environment:
      SERVER_BASEPATH: "/kibana"
      SERVER_REWRITEBASEPATH: "true"
      TELEMETRY_ENABLED: "false"
      elasticsearch.hosts: '["http://elasticsearch:9200"]'
    networks:
      - elk
    depends_on:
      - elasticsearch
    deploy:
      mode: global

  caddy:
    image: salsitu/minitwitcaddy:latest
    container_name: "minitwit_caddy"
    restart: unless-stopped
    environment:
      DOMAINNAME: "${DOMAINNAME:-localhost:80}"
      KIBANA_PW_HASH: "${KIBANA_PW_HASH:-admin}"
    volumes:
      - caddy_config:/config
      - caddy_data:/data
    networks:
      - main
      - elk
    ports:
      - "80:80"
      - "443:443"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - DAC_OVERRIDE
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip

  watchtower:
    image: containrrr/watchtower:latest
    container_name: "minitwit_watchtower"
    restart: unless-stopped
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global

volumes:
  caddy_config:
  caddy_data:
  elk_minitwit_data:
  grafana_data:
  postgres_data:
  prometheus_data:

networks:
  elk:
    name: elk-network
    driver: overlay
    attachable: true
  main:
    name: main-network
    driver: overlay
    attachable: true
